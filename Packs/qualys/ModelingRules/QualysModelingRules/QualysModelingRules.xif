[MODEL: dataset="qualys_qualys_raw"]
filter
    event_type in ("activity_log")
| alter
    extract_tar_ip = arraystring(regextract(Details, "target:[^\S]+(.*)$"), ""),
    extract_src_ip = arraystring(regextract(Details, "\"ips\":\"([^\"]+)\""), ""),
    extract_tar2_ip = arraystring(regextract(Details, "for\s([\d\.]+)"), ""),

| alter
    tar_ip_v4 = if(extract_tar_ip !~= ":", extract_tar_ip, null),
    tar_ip_v6 = if(extract_tar_ip ~= ":", extract_tar_ip, null),
    tar_ip_2_v4 = if(extract_tar_ip !~= ":", extract_tar_ip, null),
    tar_ip_2_v6 = if(extract_tar_ip ~= ":", extract_tar_ip, null),
    src_ip_v4 = if(extract_tar_ip !~= ":", extract_tar_ip, null),
    src_ip_v6 = if(extract_tar_ip ~= ":", extract_tar_ip, null),
    req_id = arraystring(regextract(Details, "\"requestId\":\"([^\"]+)"), ""),
    entity_name = arraystring(regextract(Details, "\"entityName\":\"([^\"]+)"), ""),
    operation = arraystring(regextract(Details, "\"operation\":\"([^\"]+)"), ""),
    asset_group_id = arraystring(regextract(Details, "\"assetGroupId\":\"([^\"]+)"), ""),
    name = arraystring(regextract(Details, "\"name\":\"([^\"]+)"), ""),
    business_impact = arraystring(regextract(Details, "\"businessImpact\":\"([^\"]+)"), ""),
    business_division = arraystring(regextract(Details, "\"businessDivision\":\"([^\"]+)"), ""),
    net_bios = arraystring(regextract(Details, "\"netBios\":\"([^\"]+)"), ""),
    modules = arraystring(regextract(Details, "\"modules\":\"([^\"]+)"), ""),
    report_size = arraystring(regextract(Details, "Report Size:([^\s]+)"), ""),
    status = arraystring(regextract(Details, "Status:([^\s]+)"), ""),
    criticality = arraystring(regextract(Details, "Criticality:([^\s]+)"), ""),
    report_duration = arraystring(regextract(Details, "Report Duration:([^\s]+)"), ""),
    format = arraystring(regextract(Details, "FORMAT:([^\s]+)"), ""),
    title_capital = arraystring(regextract(Details, "TITLE:([^\s]+)"), ""),
    title_equal = arraystring(regextract(Details, "title=([^\s]+)"), ""),
    owner = arraystring(regextract(Details, "owner=([^\s]+)"), ""),
    function = arraystring(regextract(Details, "Function=\[([^\]]+)"), ""),
    comment = arraystring(regextract(Details, "comment=\[([^\]]+)"), ""),
    id_report = arraystring(regextract(Details, "ID:([^\s]+)"), ""),

| alter
    xdm.observer.action = Action,
    xdm.event.type = coalesce(Module, entity_name),
    xdm.event.description = Details,
    xdm.event.id = coalesce(req_id, id_report),
    xdm.source.ipv4 = coalesce(src_ip_v4, User_IP),
    xdm.source.ipv6 = src_ip_v6,
    xdm.target.ipv4 = coalesce(tar_ip_v4, tar_ip_2_v4),
    xdm.target.ipv6 = coalesce(tar_ip_v6, tar_ip_2_v6),
    xdm.event.operation_sub_type = coalesce(operation,comment),
    xdm.source.host.hostname = name,
    xdm.alert.severity = coalesce(business_impact, criticality),
    xdm.source.user.ou = coalesce(business_division,function),
    xdm.source.user.netbios_domain = net_bios,
    xdm.observer.type = modules,
    xdm.target.file.size = report_size,
    xdm.target.file.extension = format,
    xdm.event.outcome = status,
    xdm.event.outcome_reason = status,
    xdm.event.duration = to_integer(report_duration),
    xdm.source.agent.identifier = owner,
    xdm.target.file.filename = coalesce(title_capital, title_equal),
    xdm.source.user.username = User_Name,
    xdm.auth.privilege_level = User_Role;

filter
    event_type in ("host_list_detection")
| alter
    xdm.source.host.hardware_uuid = ID,
//    xdm.source.agent.identifier = ASSET_ID,
    xdm.source.ipv4 = IP,
//    xdm.source.ipv6 = IPV6,
    xdm.observer.type = TRACKING_METHOD,
//    xdm.network.session_id = NETWORK_ID,
//    xdm.source.host.os = coalesce(OS, OS_CPE),
    xdm.source.host.hostname = coalesce(json_extract_scalar(DNS_DATA, "$.HOSTNAME"), json_extract_scalar(DETECTION, "$.INSTANCE")),
    xdm.source.host.fqdn = coalesce(json_extract_scalar(DNS_DATA, "$.FQDN"), json_extract_scalar(DETECTION, "$.FQDN")),
//    xdm.source.cloud.provider = CLOUD_PROVIDER,
//    xdm.source.cloud.project = coalesce(CLOUD_SERVICE, json_extract_scalar(METADATA, "$.EC2.NAME"), json_extract_scalar(METADATA, "$.GOOGLE.NAME"), json_extract_scalar(METADATA, "$.AZURE.NAME")),
//    xdm.source.host.device_id = coalesce(EC2_INSTANCE_ID, CLOUD_RESOURCE_ID),
//    xdm.source.user.netbios_domain = NETBIOS,
//    xdm.observer.unique_identifier = QG_HOSTID,
//    xdm.event.tags = coalesce(json_extract_scalar(`TAG`, "$.NAME"), json_extract_scalar(CLOUD_PROVIDER_TAGS, "$.NAME")),
    xdm.event.id = json_extract_scalar(DETECTION, "$.QID"),
    xdm.alert.subcategory = json_extract_scalar(DETECTION, "$.TYPE"),
    xdm.alert.severity = json_extract_scalar(DETECTION, "$.SEVERITY"),
    xdm.source.port = json_extract_scalar(DETECTION, "$.PORT"),
    xdm.network.ip_protocol = json_extract_scalar(DETECTION, "$.PROTOCOL"),
    xdm.observer.action = json_extract_scalar(DETECTION, "$.STATUS"),
    xdm.source.application.name = json_extract_scalar(DETECTION, "$.SERVICE"),
    xdm.event.outcome = coalesce(json_extract_scalar(DETECTION, "$.IS_IGNORED"), json_extract_scalar(DETECTION, "$.IS_DISABLED"));
